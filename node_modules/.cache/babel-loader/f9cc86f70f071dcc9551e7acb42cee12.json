{"ast":null,"code":"import _toConsumableArray from\"/home/sumit/Desktop/NoteKeeperApp/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/sumit/Desktop/NoteKeeperApp/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import Header from\"./Header\";import Footer from\"./Footer\";import Note from\"./Note\";import CreateArea from\"./CreateArea\";function App(){var _useState=useState(localStorage.notes),_useState2=_slicedToArray(_useState,2),notes=_useState2[0],setNotes=_useState2[1];// console.log(location.state.loggedIn);\nfunction getArray(notesString){var notesArray=notesString?JSON.parse(notesString):[];return notesArray;}function addNote(note){// console.log(note);\nsetNotes(function(prevNotes){var prevNotesArray=localStorage.notes?getArray(prevNotes):[];var newNotes=[].concat(_toConsumableArray(prevNotesArray),[note]);localStorage.notes=JSON.stringify(newNotes);return localStorage.notes;});}function removeNote(noteID){setNotes(function(prevNotes){var prevNotesArray=localStorage.notes?getArray(prevNotes):[];var newNotes=prevNotesArray.filter(function(value,id){return id+1!==noteID;});localStorage.notes=JSON.stringify(newNotes);return localStorage.notes;});}// console.log(notes);\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Header,{isLoggedIn:true}),/*#__PURE__*/React.createElement(CreateArea,{onAdd:addNote}),/*#__PURE__*/React.createElement(\"div\",{className:\"noteDiv\"},/*#__PURE__*/React.createElement(Note,{key:0,id:0,title:\"Note title\",content:\"Note content\",onDelete:removeNote}),getArray(notes).map(function(note,noteID){return/*#__PURE__*/React.createElement(Note,{key:noteID+1,id:noteID+1,title:note.title,content:note.content,onDelete:removeNote});})),/*#__PURE__*/React.createElement(Footer,null));}export default App;","map":{"version":3,"sources":["/home/sumit/Desktop/NoteKeeperApp/src/components/App.jsx"],"names":["React","useState","Header","Footer","Note","CreateArea","App","localStorage","notes","setNotes","getArray","notesString","notesArray","JSON","parse","addNote","note","prevNotes","prevNotesArray","newNotes","stringify","removeNote","noteID","filter","value","id","map","title","content"],"mappings":"gPAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAGA,QAASC,CAAAA,GAAT,EAAe,CACb,cAA0BL,QAAQ,CAACM,YAAY,CAACC,KAAd,CAAlC,wCAAOA,KAAP,eAAcC,QAAd,eAEA;AACA,QAASC,CAAAA,QAAT,CAAkBC,WAAlB,CAA+B,CAC7B,GAAMC,CAAAA,UAAU,CAAGD,WAAW,CAAGE,IAAI,CAACC,KAAL,CAAWH,WAAX,CAAH,CAA6B,EAA3D,CACA,MAAOC,CAAAA,UAAP,CACD,CAED,QAASG,CAAAA,OAAT,CAAiBC,IAAjB,CAAuB,CACrB;AAEAP,QAAQ,CAAC,SAACQ,SAAD,CAAe,CACtB,GAAMC,CAAAA,cAAc,CAAGX,YAAY,CAACC,KAAb,CAAqBE,QAAQ,CAACO,SAAD,CAA7B,CAA2C,EAAlE,CACA,GAAME,CAAAA,QAAQ,8BAAOD,cAAP,GAAuBF,IAAvB,EAAd,CACAT,YAAY,CAACC,KAAb,CAAqBK,IAAI,CAACO,SAAL,CAAeD,QAAf,CAArB,CACA,MAAOZ,CAAAA,YAAY,CAACC,KAApB,CACD,CALO,CAAR,CASD,CAED,QAASa,CAAAA,UAAT,CAAoBC,MAApB,CAA4B,CACzBb,QAAQ,CAAC,SAACQ,SAAD,CAAe,CACrB,GAAMC,CAAAA,cAAc,CAAGX,YAAY,CAACC,KAAb,CAAqBE,QAAQ,CAACO,SAAD,CAA7B,CAA2C,EAAlE,CACA,GAAME,CAAAA,QAAQ,CAAGD,cAAc,CAACK,MAAf,CAAsB,SAACC,KAAD,CAAQC,EAAR,CAAe,CACpD,MAAQA,CAAAA,EAAE,CAAC,CAAJ,GAAWH,MAAlB,CACD,CAFgB,CAAjB,CAGAf,YAAY,CAACC,KAAb,CAAqBK,IAAI,CAACO,SAAL,CAAeD,QAAf,CAArB,CACA,MAAOZ,CAAAA,YAAY,CAACC,KAApB,CACF,CAPO,CAAR,CAQF,CAED;AAEA,mBACE,4CACE,oBAAC,MAAD,EAAQ,UAAU,CAAE,IAApB,EADF,cAGE,oBAAC,UAAD,EAAY,KAAK,CAAEO,OAAnB,EAHF,cAKE,2BAAK,SAAS,CAAC,SAAf,eACE,oBAAC,IAAD,EAAM,GAAG,CAAE,CAAX,CAAc,EAAE,CAAE,CAAlB,CAAqB,KAAK,CAAC,YAA3B,CAAwC,OAAO,CAAC,cAAhD,CAA+D,QAAQ,CAAEM,UAAzE,EADF,CAIIX,QAAQ,CAACF,KAAD,CAAR,CAAgBkB,GAAhB,CAAoB,SAACV,IAAD,CAAOM,MAAP,CAAkB,CACpC,mBAAO,oBAAC,IAAD,EAAM,GAAG,CAAEA,MAAM,CAAG,CAApB,CAAuB,EAAE,CAAEA,MAAM,CAAG,CAApC,CAAuC,KAAK,CAAEN,IAAI,CAACW,KAAnD,CAA0D,OAAO,CAAEX,IAAI,CAACY,OAAxE,CAAiF,QAAQ,CAAEP,UAA3F,EAAP,CACD,CAFD,CAJJ,CALF,cAgBE,oBAAC,MAAD,MAhBF,CADF,CAoBD,CAED,cAAef,CAAAA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\n\n\nfunction App() {\n  const [notes, setNotes] = useState(localStorage.notes);\n\n  // console.log(location.state.loggedIn);\n  function getArray(notesString) {\n    const notesArray = notesString ? JSON.parse(notesString) : [];\n    return notesArray;\n  }\n\n  function addNote(note) {\n    // console.log(note);\n    \n    setNotes((prevNotes) => {\n      const prevNotesArray = localStorage.notes ? getArray(prevNotes) : [];\n      const newNotes = [...prevNotesArray, note];\n      localStorage.notes = JSON.stringify(newNotes);\n      return localStorage.notes;\n    }); \n\n    \n     \n  }\n\n  function removeNote(noteID) {\n     setNotes((prevNotes) => {\n        const prevNotesArray = localStorage.notes ? getArray(prevNotes) : [];\n        const newNotes = prevNotesArray.filter((value, id) => {\n          return (id+1) !== noteID;\n        })\n        localStorage.notes = JSON.stringify(newNotes);\n        return localStorage.notes;\n     })\n  }\n\n  // console.log(notes);\n\n  return (\n    <div>\n      <Header isLoggedIn={true} />\n\n      <CreateArea onAdd={addNote} /> \n    \n      <div className=\"noteDiv\" >\n        <Note key={0} id={0} title=\"Note title\" content=\"Note content\" onDelete={removeNote} />\n\n        {\n          getArray(notes).map((note, noteID) => {\n            return <Note key={noteID + 1} id={noteID + 1} title={note.title} content={note.content} onDelete={removeNote} />\n          })\n\n        }\n      </div> \n      \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}